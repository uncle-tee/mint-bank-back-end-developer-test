buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:2.2.1.RELEASE")
    }
}


plugins {
    id 'org.springframework.boot' version '2.2.5.RELEASE'
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    id 'java'
}

group = 'com.bankwithmint'
version = '0.0.1'
sourceCompatibility = '1.8'


configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
}


bootJar {
    mainClassName = 'com.bankwithmint.developertest.DevelopertestApplication'
}
allprojects {
    apply plugin: 'java'
    repositories {
        mavenCentral()
    }
    dependencies {
        testImplementation 'org.junit.jupiter:junit-jupiter-api:5.3.1'
        testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.3.1'
    }
    test {
        useJUnitPlatform()
    }
    sourceSets {
        test {
            resources {

            }
        }
    }
}

repositories {
    mavenCentral()
}


dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-aop'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    runtimeOnly 'org.postgresql:postgresql'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
//    providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    implementation 'com.squareup.retrofit2:retrofit:2.5.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.5.0'
    implementation("javax.inject:javax.inject:1")
    implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.8'

    implementation(project(":dlabs-spring-starter"))
    implementation(project(":dlabs-starter"))
    implementation(project(":${projectName}-api-client"))
    implementation(project(":${projectName}-domain"))
    implementation(project(":${projectName}-service"))
    implementation(project(":${projectName}-service-impl"))
    implementation(project(":${projectName}-web-conf"))
    implementation(project(":${projectName}-controller"))
    implementation(project(":${projectName}-dto"))
}
